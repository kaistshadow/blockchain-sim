#ifndef SOCKET_V2_H
#define SOCKET_V2_H

#include "Socket.h"

#include <ev++.h>
#include <list>
#include <string.h>
#include <memory>

#define DEFAULT_SOCKET_PORT 3456
#define BACKLOG 100     /* how many pending connections queue will hold */

namespace libBLEEP {

    enum class DoSendResultEnum {
        none,
        SendBuffEmptied,
    };


    class Socket_v2 {
    protected:
        /* file descriptor */
        int _fd;

    public:
        virtual ~Socket_v2() {};
        virtual SocketTypeEnum GetType() = 0;

        int GetFD() { return _fd; }
    };
    
    /* class for non-blocking listen socket */
    class ListenSocket_v2 : public Socket_v2 {

    public:
        // To create ListenSocket it is highly recommended to use ListenSocketManager
        ListenSocket_v2(int port = DEFAULT_SOCKET_PORT);

        int DoAccept(); /* do accept and return file descriptor */

        virtual ~ListenSocket_v2();
        virtual SocketTypeEnum GetType() { return SocketTypeEnum::ListenSocket; }
    };
    
    /* class for non-blocking connecting socket */
    class ConnectSocket_v2 : public Socket_v2 {
    public:
        // To create ConnectSocket it is highly recommended to use ConnectSocketManager
        ConnectSocket_v2(std::string domain);

        virtual ~ConnectSocket_v2() {}; // should not be closed. (same fd can be used for dataSocket)
        virtual SocketTypeEnum GetType() { return SocketTypeEnum::ConnectSocket; }
    };

    /* class for data-communicating socket */
    class DataSocket_v2 : public Socket_v2 {
    private:
        SocketRecvBuffer _recvBuff;
        std::list<std::shared_ptr<WriteMsg> > _sendBuff;

    public:
        /* Every data socket are created after the ListenSocket or ConnectSocket 
           are created and estabilished. 
           Thus, constructor of the DataSocket receives the socket fd that
           is generated by ListenSocket or ConnectSocket */
        // To create DataSocket it is highly recommended to use DataSocketManager
        DataSocket_v2(int fd);

        /* maybe following socket functions can be redesigned in more intuitive ways? 
           or there should be more intuitive interface for user who doesn't need to care 
           about internal buffers such as recvBuff, sendBuff? */
        std::pair < bool, std::shared_ptr<Message> > DoRecv(); /* do recv and return pointer for received Message (if fully received) */
        DoSendResultEnum DoSend(); /* do actual send (by retrieving the data stream from sendBuff) */
        void AppendMessageToSendBuff(std::shared_ptr<Message> message); /* append a requested message into internal sendBuff */

        virtual ~DataSocket_v2();
        virtual SocketTypeEnum GetType() { return SocketTypeEnum::DataSocket; }
    };

}




#endif

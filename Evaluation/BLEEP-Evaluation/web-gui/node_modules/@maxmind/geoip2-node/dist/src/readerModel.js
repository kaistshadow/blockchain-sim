"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ip6addr = require("ip6addr");
const set = require("lodash.set");
const mmdb = require("maxmind");
const errors_1 = require("./errors");
const models = require("./models");
class ReaderModel {
    constructor(mmdbReader) {
        this.mmdbReader = mmdbReader;
    }
    anonymousIP(ipAddress) {
        return this.modelFor(models.AnonymousIP, 'GeoIP2-Anonymous-IP', ipAddress, 'anonymousIP()');
    }
    city(ipAddress) {
        return this.modelFor(models.City, 'City', ipAddress, 'city()');
    }
    country(ipAddress) {
        return this.modelFor(models.Country, 'Country', ipAddress, 'country()');
    }
    asn(ipAddress) {
        return this.modelFor(models.Asn, 'ASN', ipAddress, 'asn()');
    }
    connectionType(ipAddress) {
        return this.modelFor(models.ConnectionType, 'Connection-Type', ipAddress, 'connectionType()');
    }
    domain(ipAddress) {
        return this.modelFor(models.Domain, 'Domain', ipAddress, 'domain()');
    }
    isp(ipAddress) {
        return this.modelFor(models.Isp, 'ISP', ipAddress, 'isp()');
    }
    enterprise(ipAddress) {
        return this.modelFor(models.Enterprise, 'Enterprise', ipAddress, 'enterprise()');
    }
    getRecord(dbType, ipAddress, fnName) {
        const metaDbType = this.mmdbReader.metadata.databaseType;
        if (!mmdb.validate(ipAddress)) {
            throw new errors_1.ValueError(`${ipAddress} is invalid`);
        }
        if (!metaDbType.includes(dbType)) {
            throw new errors_1.BadMethodCallError(`The ${fnName} method cannot be used with the ${metaDbType} database`);
        }
        let record;
        let prefixLength;
        try {
            [record, prefixLength] = this.mmdbReader.getWithPrefixLength(ipAddress);
        }
        catch (_a) {
            record = undefined;
            prefixLength = undefined;
        }
        if (!record) {
            throw new errors_1.AddressNotFoundError(`The address ${ipAddress} is not in the database`);
        }
        return [record, ip6addr.createCIDR(ipAddress, prefixLength).toString()];
    }
    modelFor(modelClass, dbType, ipAddress, fnName) {
        const [record, network] = this.getRecord(dbType, ipAddress, fnName);
        const model = new modelClass(record);
        switch (dbType) {
            case 'ASN':
            case 'Connection-Type':
            case 'Domain':
            case 'GeoIP2-Anonymous-IP':
            case 'ISP':
                set(model, 'ipAddress', ipAddress);
                set(model, 'network', network);
                break;
            default:
                set(model, 'traits.ipAddress', ipAddress);
                set(model, 'traits.network', network);
        }
        return model;
    }
}
exports.default = ReaderModel;

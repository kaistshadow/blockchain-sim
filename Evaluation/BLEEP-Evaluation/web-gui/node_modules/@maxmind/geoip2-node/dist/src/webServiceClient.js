"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const mmdb = require("maxmind");
const package_json_1 = require("../package.json");
const models = require("./models");
class WebServiceClient {
    constructor(accountID, licenseKey, timeout) {
        this.host = 'geoip.maxmind.com';
        this.accountID = accountID;
        this.licenseKey = licenseKey;
        this.timeout = timeout || 3000;
    }
    city(ipAddress) {
        return this.responseFor('city', ipAddress, models.City);
    }
    country(ipAddress) {
        return this.responseFor('country', ipAddress, models.Country);
    }
    insights(ipAddress) {
        return this.responseFor('insights', ipAddress, models.Insights);
    }
    responseFor(path, ipAddress, modelClass) {
        const parsedPath = `/geoip/v2.1/${path}/${ipAddress}`;
        const url = `https://${this.host}${parsedPath}`;
        if (!mmdb.validate(ipAddress)) {
            return Promise.reject({
                code: 'IP_ADDRESS_INVALID',
                error: 'The IP address provided is invalid',
                url,
            });
        }
        const options = {
            auth: `${this.accountID}:${this.licenseKey}`,
            headers: {
                Accept: 'application/json',
                'User-Agent': `GeoIP2-node/${package_json_1.version}`,
            },
            host: this.host,
            method: 'GET',
            path: parsedPath,
            timeout: this.timeout,
        };
        return new Promise((resolve, reject) => {
            const req = https.request(options, response => {
                let data = '';
                response.on('data', chunk => {
                    data += chunk;
                });
                response.on('end', () => {
                    try {
                        data = JSON.parse(data);
                    }
                    catch (_a) {
                        return reject(this.handleError({}, response, url));
                    }
                    if (response.statusCode && response.statusCode !== 200) {
                        return reject(this.handleError(data, response, url));
                    }
                    return resolve(new modelClass(data));
                });
            });
            req.on('error', (err) => {
                return reject({
                    code: err.code,
                    error: err.message,
                    url,
                });
            });
            req.end();
        });
    }
    handleError(data, response, url) {
        if (response.statusCode &&
            response.statusCode >= 500 &&
            response.statusCode < 600) {
            return {
                code: 'SERVER_ERROR',
                error: `Received a server error with HTTP status code: ${response.statusCode}`,
                url,
            };
        }
        if (response.statusCode &&
            (response.statusCode < 400 || response.statusCode >= 600)) {
            return {
                code: 'HTTP_STATUS_CODE_ERROR',
                error: `Received an unexpected HTTP status code: ${response.statusCode}`,
                url,
            };
        }
        if (!data.code || !data.error) {
            return {
                code: 'INVALID_RESPONSE_BODY',
                error: 'Received an invalid or unparseable response body',
                url,
            };
        }
        return Object.assign(Object.assign({}, data), { url });
    }
}
exports.default = WebServiceClient;

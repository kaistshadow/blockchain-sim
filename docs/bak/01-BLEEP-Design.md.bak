# BLEEP's Goal 
비용효율적인 블록체인 개발 및 테스트환경을 제공하는 플랫폼을 구축하는것이 목표이며,<br> 
블록체인의 범위는 현재 C/C++기반 블록체인 기반기술을 대상으로 하며, 향후에는 다양한 언어로 구현된 블록체인과<br> 
이를 이용하는 어플리케이션까지 확장하고자 한다.<br>  
이를위해 BLEEP은 다음과 같은 3가지의 핵심 목표를 추구한다.
- 개발자를 위한 블록체인 모듈형 라이브러리 및 인터페이스 제공
- 다양한 언어로 구현된 블록체인 바이너리의 동작을 에뮬레이션
- 블록체인 동작 검증을 위한 기능 및 성능, 취약성 등의 테스팅 환경 제공

# Design
블록체인 개발자가 "개발-테스트 및 배포-실행-결과"의 4단계를 통해 실제 블록체인 어플리케이션의 동작을 검증 할 수 있도록 설계 되었다.<br> 
구현 및 테스팅을 위한 라이브러리 인터페이스와 대시보드 인터페이스가 있으며, 로깅 작업을 통해 결과를 저장 및 출력(시각화 등)할 수 있도록 설계 하였다. 

BLEEP은 CMake 빌드 시스템을 이용해 구조화 되어 있으며, 각 폴더의 역할은 아래와 같다.  
- 네트워크 시뮬레이터 및 바이너리 에뮬레이터
  - `Shadow` : Shadow는 Tor 네트워크의 동작을 시뮬레이션 하기 위한 오픈 프로젝트이며, BLEEP팀은 Shadow를 기반으로 블록체인의 에뮬레이션 환경을 제공
- 블록체인 노드 Emulation 테스트
  - `BLEEPemul` : 현재 비트코인 노드에 대한 채굴, 트랜잭션, 노드 확장 등을 에뮬레이션할 수 있는 프레임워크를 제공(자동화된 스크립트 코드 제공)
- 블록체인 노드 Evaluation 테스트
  - `BLEEPeval` : 블록체인의 구현체의 동작을 평가하기 위한 보안성, 성능 등을 테스트할 수 있는 프레임워크를 제공
- BLEEP 라이브러리 
  - `BLEEPlib` : 블록체인 기반기술 개발 및 테스팅을 위한 라이브러리(P2P 네트워크, 합의 알고리즘 등) 제공
  - `external`
    - 테스팅 대상이되는 블록체인 및 블록체인이 의존하는 커스텀 라이브러리를 제공
  - `testlibs` 
    - 테스팅을 위해 필요한 스크립트 및 라이브러리 코드 제공
  - `interfaces`
    - BLEEP과 Shadow을 커스텀하게 사용 가능하도록 인터페이스를 제공. BLEEP을 설치하면 Install 폴더에 라이브러리 파일로 생성됨.
- 단위 및 통합 테스트 
  - `tests` 
    - 블록체인의 동작에 대한 단위 및 통합 테스팅하기 위한 테스트케이스를 제공
- BLEEP 인스톨 파일
  - `Install`
    - BLEEP에서 공통적으로 사용하는 플러그인, 라이브러리, 헤더파일, CMake파일 등을 제공 <br><br>

![BLEEP Architecture](https://github.com/kaistshadow/blockchain-sim/blob/feature/191/documentation/doc/images/BLEEP_Architecture.png)
